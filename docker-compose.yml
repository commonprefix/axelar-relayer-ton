x-common-env: &common-env
  image: relayer
  volumes:
    - ./config:/app/relayer_base/config
    - ./certs:/app/relayer_base/certs
  deploy:
    mode: replicated
    replicas: 1
  env_file:
    - .env
  environment:
    JAEGER_ENDPOINT: http://jaeger:4317

services:
  relayer:
    build:
      dockerfile: Dockerfile.ton
      context: .
    image: relayer
    command: [ "true" ]

  ingestor:
    container_name: ton_ingestor
    <<: *common-env
    command: ton_ingestor

  subscriber:
    container_name: ton_subscriber
    <<: *common-env
    command: ton_subscriber

  includer:
    container_name: ton_includer
    <<: *common-env
    command: ton_includer

  distributor:
    container_name: ton_distributor
    <<: *common-env
    command: ton_distributor

  price_feed:
    container_name: price_feed
    <<: *common-env
    command: price_feed

  heartbeat_monitor:
    container_name: heartbeat_monitor
    <<: *common-env
    command: ton_heartbeat_monitor

  account_checker:
    container_name: account_checker
    <<: *common-env
    command: ton_account_checker

  redis:
    image: redis:alpine
    container_name: relayer_redis
    ports:
      - "6384:6379"
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: relayer_rabbitmq
    environment:
      RABBITMQ_PLUGINS: "rabbitmq_prometheus rabbitmq_management"
    ports:
      - "5677:5672"
      - "15677:15672"
      - "15697:15692"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  postgres:
    image: postgres:16
    container_name: relayer_postgres
    ports:
      - "5437:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: >
      -c max_connections=300
      -c shared_buffers=512MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d

  grafana:
    image: grafana/grafana:latest
    container_name: relayer_grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana

  jaeger:
    image: cr.jaegertracing.io/jaegertracing/jaeger:2.9.0
    container_name: relayer_jaeger
    restart: always
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    command:
      - "--config=/etc/jaeger/config.yaml"
      - "--set=receivers.otlp.protocols.grpc.endpoint=0.0.0.0:4317"
      - "--set=receivers.otlp.protocols.http.endpoint=0.0.0.0:4318"
      - "--set=extensions.jaeger_query.http.endpoint=0.0.0.0:16686"
    volumes:
      - ./deploy/config/jaeger.yaml:/etc/jaeger/config.yaml:ro

  opensearch:
    image: opensearchproject/opensearch:3.2.0
    container_name: relayer_opensearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - DISABLE_SECURITY_PLUGIN=true # Only for development!
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch_data:/usr/share/opensearch/data

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:3.2.0
    container_name: relayer_osd
    environment:
      - OPENSEARCH_HOSTS=http://opensearch:9200
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    depends_on:
      - opensearch
    ports:
      - "5601:5601"


volumes:
  redis_data:
  rabbitmq_data:
  postgres_data:
  grafana_data:
  opensearch_data:

